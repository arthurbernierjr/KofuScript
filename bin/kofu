#!/usr/bin/env coffee

fs = require 'fs'
path = require 'path'
CoffeeScript = require '../lib/module'
{exec, spawn} = require 'child_process'
cscodegen = require 'cscodegen'
escodegen = require 'escodegen'

repl = require '../lib/repl'
reporter = require '../lib/reporter'
{debug} = require '../lib/helpers'

{argv} = require('optimist')
  .boolean('compile')
  .boolean('bare')
  .boolean('scope')
  .boolean('self')
  .boolean('print')
  .alias('c', 'compile')
  .alias('e', 'execute')
  .alias('b', 'bare')
  .alias('o', 'out')
  .alias('j', 'join')
  .alias('d', 'debug')

{runMain} = require '../lib/run'

compileFromSourceToJS = (source, {parseOption, compileOption} = {}) ->
  cs_ast = CoffeeScript.parse source, parseOption ? {
    optimise: yes
    raw: true
    inputSource: source
    sourceMap: true
    literate
  }
  compileOptions = {
    bare: true
    header: true
  }
  js_ast = CoffeeScript.compileTypedToCS cs_ast, compileOptions ? bare: !!argv.bare
  CoffeeScript.js js_ast, compileOptions

run = (fname, source, {parseOption, compileOption} = {}) ->
  cs_ast = CoffeeScript.parse source, parseOption ? {
    optimise: yes
    raw: true
    inputSource: source
    sourceMap: true
    literate
  }
  compileOptions = {
    bare: true
    header: true
  }
  js_ast = CoffeeScript.compile cs_ast, compileOptions ? bare: !!argv.bare
  js = escodegen.generate js_ast
  runMain source, js, js_ast, fname

mode = switch
  when argv.z or argv.svelte then 'svelte'
  when argv.c or argv.compile then 'compile'
  when argv.e or argv.execute then 'execute'
  when argv._.length > 0      then 'execute'
  else 'repl'

moduleCode = 'var _include_,_module_;_module_=function(e){return function(t,n,r){var i,s,o,u,a,f,l;r==null&&(r=o),o=(f=typeof window!=="undefined"&&window!==null?window:global)!=null?f:e,r==null&&(r=o),i=[],l=t.split(".");for(u=0,a=l.length;u<a;u++)s=l[u],r[s]==null&&(r[s]={}),r=r[s],i.push(r);return n.apply(r,i)}}(this),_include_=function(e,t){var n,r;for(n in t)r=t[n],e[n]=r;return t}; var present=console.log;'
class Code
  @join: (codes, to) ->
    c = new Code
      from: (c.from for c in codes)
      to: to
      code: (c.code for c in codes).join('\n')
    c

  constructor: ({@from, @to, @code}) ->

  writeSync: ->
    err = fs.writeFileSync @to, @code
    throw err if err
    console.log 'compile:', @from, '->', @to

  write: (callback) ->
    if global._root_.hasModule
      @code = moduleCode + '\n' + @code
    fs.writeFile @to, @code, (err) =>
      throw err if err
      console.log 'compile:', @from, '->', @to
      callback?()

switch mode
  when 'svelte'
    {Preprocessor} = require '../lib/preprocessor'

    literate = argv.literate
    filepaths = argv._

    result = ""

    codes = []
    for fpath in filepaths
      # TODO: check existence
      source = fs.readFileSync(fpath).toString()
      # preprocessed = Preprocessor.process source, {literate}
      try
        cs_ast = CoffeeScript.parse source, {
          optimise: no
          raw: true
          sourceMap: true
          inputSource: source
          literate
        }
      catch e
        console.error 'Greetings from the svelteCompile Function in the kofu executable My dude no big deal but you have an Error at', fpath
        throw e
        process.exit(1)

      if argv.csast
        console.log cs_ast
        return

      if argv.cscodegen
        console.log cscodegen.generate cs_ast
        return

      code = CoffeeScript.svelteCompile cs_ast


      extReplacer = (name) ->
        name
          .replace('.typed.coffee', '.js')
          .replace('.tcoffee', '.js')
          .replace('.coffee', '.js')
          .replace('.kofu', '.js')

      outpath =
        if argv.out
          name = extReplacer path.basename(fpath)
          path.join (argv.out or ''), name
        else
          extReplacer path.basename(fpath)
      codes.push new Code
        from: fpath
        to: outpath
        code: code

    # if argv.join and argv.browserify # TODO
    if argv.join
      outpath = path.join(argv.out or '', argv.join)
      joined = Code.join(codes, outpath)
      joined.write()
    else
      for code in codes
        if argv.print
          console.log code.code
        else
          code.write()

  when 'compile'
    {Preprocessor} = require '../lib/preprocessor'

    literate = argv.literate
    filepaths = argv._

    result = ""

    codes = []
    for fpath in filepaths
      # TODO: check existence
      source = fs.readFileSync(fpath).toString()
      # preprocessed = Preprocessor.process source, {literate}
      try
        cs_ast = CoffeeScript.parse source, {
          optimise: no
          raw: true
          sourceMap: true
          inputSource: source
          literate
        }
      catch e
        console.error 'Error at', fpath
        throw e
        process.exit(1)

      if argv.csast
        console.log cs_ast
        return

      if argv.cscodegen
        console.log cscodegen.generate cs_ast
        return

      js_ast = CoffeeScript.compile cs_ast, bare: !!argv.bare
      code = CoffeeScript.js js_ast

      extReplacer = (name) ->
        name
          .replace('.typed.coffee', '.js')
          .replace('.tcoffee', '.js')
          .replace('.coffee', '.js')
          .replace('.kofu', '.js')

      outpath =
        if argv.out
          name = extReplacer path.basename(fpath)
          path.join (argv.out or ''), name
        else
          extReplacer path.basename(fpath)
      codes.push new Code
        from: fpath
        to: outpath
        code: code

    # if argv.join and argv.browserify # TODO
    if argv.join
      outpath = path.join(argv.out or '', argv.join)
      joined = Code.join(codes, outpath)
      joined.write()
    else
      for code in codes
        if argv.print
          console.log code.code
        else
          code.write()

  when 'execute'
    fpath = argv.execute ?  argv._[0]
    source = fs.readFileSync(fpath).toString()
    run fpath, '\`' + moduleCode + '\`\n' + source

  when 'repl'
    repl.start()
