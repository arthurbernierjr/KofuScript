require('../../lib/module').register()
_ = require "./prelude/underscore.coffee"

# Number formats
present '--- Number formats ---'
present 144
present 144.toString 2

present 9.81
present 2.998e8

# Rounding errors
present '--- Rounding errors ---'
p = 1/3
present 6*p is 2
present p+p+p+p+p+p is 2
present 2-1e-15 < p+p+p+p+p+p < 2+1e-15

# Rounding errors accumulate in loops
i = 0
i++ for angle in [0...2*Math.PI] by 1/3*Math.PI
present i # Gives 7 iterations and not 6


# Arithmetic operators
present '--- Arithmetic operators ---'
present 100 + 4 * 11
present (100 + 4) * 11

present 115 * 4 - 4 + 88 / 2

present 314 % 100
present 10 % 3
present 144 % 12


# String types
present '--- String types ---'
present 'Patch my boat with chewing gum.'
present 'The programmer pondered: "0x2b or not 0x2b"'
present "Aha! It's 43 if I'm not a bit off"
present "2 + 2 is equal to #{2 + 2}"

present 'Imagine if this was a
 very long line of text'

present '''First comes A
        then comes B'''

present """  1
        + 1
        ---  # " The next line confuses docco
          #{1 + 1}"""

# Escape characters
present '--- Escape characters ---'
present 'This is the first line\nAnd this is the second'
present 'A newline character is written like \"\\n\".'
present 'con' + 'cat' + 'e' + 'nate'

# String description of a type
present '--- String description of a type ---'
present typeof 4.5

# Unary minus
present '--- Unary minus ---'
present -(10 - 2)

# Booleans
present '--- Booleans ---'
present 3 > 2
present 3 < 2

# Chained comparisons
present '--- Chained comparisons ---'
present 100 < 115 < 200
present 100 < 315 < 200

# String comparisons
present '--- String comparisons ---'
present 'Aardvark' < 'Zoroaster'
present 'Itchy' != 'Scratchy'

# Logical operators
present '--- Logical operators ---'
present true and false
present true or false
present !true
present not false

# Exercise 1
present '--- Exercise 1 ---'
present ((4 >= 6) || ('grass' != 'green')) && !(((12 * 2) == 144) && true)

present (4 >= 6 or 'grass' isnt 'green') and not(12 * 2 is 144 and true)

present (false or true) and not(false and true)
present true and not false
present 'grass' != 'green'
present '--- End of Exercise ---'

# Useless program
present '--- Useless program ---'
1; !false
present 'Nothing was intentionally output'

# Variables
present '--- Variables ---'
caught = 5 * 5
present caught
present caught + 1
caught = 4 * 4
present caught

# Tentacles
present '--- Tentacles ---'
luigiDebt = 140
luigiDebt = luigiDebt - 35
present luigiDebt

# Environment
present '--- Environment ---'
# To present the environment, use: present global or present window
present 'Also, your hair is on fire.'

# Function invocation
present '--- Function invocation ---'
present Math.max 2, 4

present 100 + Math.max 7, 4
present Math.max(7, 4) + 100
present Math.max(7, 4 + 100)
present Math.max 7, 4 + 100

# Explore the environment - Try this in the REPL
# present process
# present console
# present _
# present show

# Questions
present '--- Questions ---'
# chain is required here to wait for the answer
confirm 'Shall we, then?', (answer) -> present answer; chain1()

chain1 = ->
  prompt 'Tell us everything you know.', '...',
  (answer) -> present 'So you know: ' + answer; chain2()

chain2 = ->
  prompt 'Pick a number', '', (answer) ->
    theNumber = Number answer
    present 'Your number is the square root of ' +
    (theNumber * theNumber)
    chain3()

chain3 = ->
  # While loops
  present '--- While loops ---'
  present 0
  present 2
  present 4
  present 6
  present 8
  present 10
  present 12

  currentNumber = 0
  while currentNumber <= 12
    present currentNumber
    currentNumber = currentNumber + 2

  counter = 0
  while counter <= 12 then counter = counter + 2

  # Exercise 2
  present '--- Exercise 2 ---'
  result = 1
  counter = 0
  while counter < 10
    result = result * 2
    counter = counter + 1
  present result
  present '--- End of Exercise ---'

  # Exercise 3
  present '--- Exercise 3 ---'
  line = ''
  counter = 0
  while counter < 10
    line = line + '#'
    present line
    counter = counter + 1
  present '--- End of Exercise ---'

  # Sneak peek at Functional solutions
  present '--- Sneak peek at Functional solutions ---'
  present _.reduce [1..10], ((x) -> 2*x), 1
  _.reduce [1..10], ((s) -> present s += '#'), ''

  # For loops
  present '--- For loops ---'
  present 'For on one line'
  for number in [0..12] by 2 then present number
  present 'For with indented body'
  for number in [0..12] by 2
    present number
  present 'For with prepended body'
  present number for number in [0..12] by 2
  present 'For collecting results'
  numbers = (number for number in [0..12] by 2)
  present numbers

  # Comments
  present '--- Comments ---'
  # The variable counter, which is about to be defined,
  # is going to start with a value of 0, which is zero.
  counter = 0
  # Now, we are going to loop, hold on to your hat.
  while  counter < 100 # counter is less than one hundred
    ###
    Every time we loop, we INCREMENT the value of counter
    Seriously, we just add one to it.
    ###
    counter++
  # And then, we are done.


  # Exercise 4
  present '--- Exercise 4 ---'
  result = 1
  for counter in [0...10]
    result = result * 2
  present result

  line = ''
  for counter in [0...10]
    line = line + '#'
    present line
  present '--- End of Exercise ---'

  # Conditionals
  present '--- Conditionals ---'
  for counter in [0..20]
    if counter % 3 == 0 and counter % 4 == 0
      present counter

  for counter in [0..20]
    if counter % 4 == 0
      present counter
    if counter % 4 != 0
      present '(' + counter + ')'

  for counter in [0..20]
    if counter % 4 == 0
      present counter
    else
      present '(' + counter + ')'

  for counter in [0..20]
    if counter > 15
      present counter + '**'
    else if counter > 10
      present counter + '*'
    else
      present counter

  # Exercise 5
  present '--- Exercise 5 ---'
  prompt 'You! What is the value of 2 + 2?', '',
  (answer) ->
      if answer == '4'
        present 'You must be a genius or something.'
      else if answer == '3' || answer == '5'
        present 'Almost!'
      else
        present 'You are an embarrassment.'
      chain4()
  present '--- End of Exercise ---'

chain4 = ->
  # If variation
  present '--- If variation ---'
  fun = on
  present 'The present is on!' unless fun is off

  # Loop variations
  present '--- Loop variations ---'
  current = 20
  loop
    if current % 7 == 0
      break
    current++
  present current

  current = 20
  current++ until current % 7 == 0
  present current

  # Exercise 6
  present '--- Exercise 6 ---'
  luckyNumber = 5 # Choose from 1 to 6
  present "Your lucky number is #{luckyNumber}"
  count = 0
  loop
    present roll = Math.floor Math.random() * 6 + 1
    count++
    if roll is luckyNumber then break
  present "Luck took #{count} roll(s)"

  luckyNumber = 3 # Choose from 1 to 6
  present 'Your lucky number is ' + luckyNumber
  count = 0
  until roll is luckyNumber
    present roll = Math.floor Math.random() * 6 + 1
    count++
  present 'You are lucky ' +
  Math.floor(100/count) + '% of the time'
  present '--- End of Exercise ---'

  # Undefined variable
  present '--- Undefined variable ---'
  present mysteryVariable
  mysteryVariable = 'nothing'

  present console.log 'I am a side effect.'

  # Existential operator
  present '--- Existential operator ---'
  present iam ? undefined
  iam ?= 'I want to be'
  present iam
  iam ?= 'I am already'
  present iam if iam?

  # Type conversions
  present '--- Type conversions ---'
  present false == 0
  present '' == 0
  present '5' == 5

  # String type conversions
  present '--- String type conversions ---'
  present 'Apollo' + 5
  present null + 'ify'
  present '5' * 5
  present 'strawberry' * 5

  present Number('5') * 5

  # NaN
  present '--- NaN ---'
  present NaN == NaN

  # Boolean type conversions
  present '--- Boolean type conversions ---'
  prompt 'What is your name?', '',
  (input) ->
      present 'Well hello ' + (input || 'dear')
      chain5()

chain5 = ->
  # Short circuit operators
  present '--- Short circuit operators ---'
  false || present 'I am happening!'
  true  || present 'Not me.'

  # Exit from the chain of inputs
  process.exit()
